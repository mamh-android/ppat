#!/usr/bin/perl

use Getopt::Long;
use Data::Dumper;
use Tie::File;
use POSIX;

my $version="1.0";
my $prog="getmeminfo";

#adb default command
my $adb_s_id_root  = "adb root";
my $adb_s_id_shell = "adb shell";

sub adb_shell{
    my ($command) = @_;
    my $output = `$adb_s_id_shell $command`;
    $output =~ s/[\r\x0]//g;

    return $output;
}

sub get_meminfo_value{
    my($meminfostr, $pattern) = @_;
    if($meminfostr =~ /$pattern/m){
        return $1;
    }
}

sub get_part_meminfo_value{
    my($meminfostr, $pattern) = @_;
    if($meminfostr =~ /$pattern/s){
        return $1;
    }
}

#parse raw data file
sub parse{
    my($meminfostr) = @_;
    my $part ="";

    #===meminfo== part
    $part = get_part_meminfo_value($meminfostr, '(===meminfo===.*?===end meminfo===)');
    my $mem_buffers      = get_meminfo_value($part, 'Buffers:\s+(\d+)\skB');
    my $mem_cached       = get_meminfo_value($part, 'Cached:\s+(\d+)\skB');
    my $mem_swapcached   = get_meminfo_value($part, 'SwapCached:\s+(\d+)\skB');
    my $mem_active       = get_meminfo_value($part, 'Active:\s+(\d+)\skB');
    my $mem_inactive     = get_meminfo_value($part, 'Inactive:\s+(\d+)\skB');
    my $mem_anonpages    = get_meminfo_value($part, 'AnonPages:\s+(\d+)\skB');
    my $mem_mapped       = get_meminfo_value($part, 'Mapped:\s+(\d+)\skB');
    my $mem_memtotal     = get_meminfo_value($part, 'MemTotal:\s+(\d+)\skB');
    my $mem_memfree      = get_meminfo_value($part, 'MemFree:\s+(\d+)\skB');
    my $mem_slab         = get_meminfo_value($part, 'Slab:\s+(\d+)\skB');
    my $mem_pagetables   = get_meminfo_value($part, 'PageTables:\s+(\d+)\skB');
    my $mem_vmallocused  = get_meminfo_value($part, 'VmallocUsed:\s+(\d+)\skB');
    my $mem_kernelstack  = get_meminfo_value($part, 'KernelStack:\s+(\d+)\skB');

    #===gc=== part
    $part = get_part_meminfo_value($meminfostr, '(===gc===.*?Sum:\s+\d+\sKB)');
    my $gc_contig        = get_meminfo_value($part, 'contiguousPaged:\s+(\d+)\sKB');
    my $gc_contignon     = get_meminfo_value($part, 'contiguousNonPaged:\s+(\d+)\sKB');
    my $gc_virtual       = get_meminfo_value($part, 'virtualPaged:\s+(\d+)\sKB');
    my $gc_total         = get_meminfo_value($part, 'GC Memory Sum:\s+(\d+)\sKB');

    #===procrank=== part
    $part = get_part_meminfo_value($meminfostr, '(===procrank===.*?===end procrank===)');
    my $pss_total        = get_meminfo_value($part, '(\d+)K\s+\d+K\s+TOTAL');
    my $pss_unnecessary  = get_meminfo_value($part, '\s+\d+\s+\d+K\s+\d+K\s+(\d+)K\s+\d+K\s+procrank');
    $pss_unnecessary    += get_meminfo_value($part, '\s+\d+\s+\d+K\s+\d+K\s+(\d+)K\s+\d+K\s+com\.marvell\.gpssetting');
    $pss_unnecessary    += get_meminfo_value($part, '\s+\d+\s+\d+K\s+\d+K\s+(\d+)K\s+\d+K\s+com\.marvell\.powersetting');
    $pss_unnecessary    += get_meminfo_value($part, '\s+\d+\s+\d+K\s+\d+K\s+(\d+)K\s+\d+K\s+com\.marvell\.usbsetting');
    $pss_unnecessary    += get_meminfo_value($part, '\s+\d+\s+\d+K\s+\d+K\s+(\d+)K\s+\d+K\s+com\.marvell\.powermeter');
    $pss_unnecessary    += get_meminfo_value($part, '\s+\d+\s+\d+K\s+\d+K\s+(\d+)K\s+\d+K\s+com\.marvell\.android.location');
    $pss_unnecessary    += get_meminfo_value($part, '\s+\d+\s+\d+K\s+\d+K\s+(\d+)K\s+\d+K\s+com\.android\.onetimeinitializer');

    #==cmainfo=== part
    $part = get_part_meminfo_value($meminfostr, '(===cmainfo===.*?Count:)');
    #this value include "(pages)",need to cut it
    my $cma_total_string = get_meminfo_value($part, '(Total:\s+\w+\s+\w+\s+\w+(\(pages\))?)');
    my $cma_toal = 0;
    my $cma_contigous = 0;
    if($cma_total_string =~ /Total:\s+\w+\s+(\w+)\s+(\w+)\(pages\)/){
        $cma_contigous = $1;
        $cma_total = $2;
    }elsif($cma_total_string =~ /Total:\s+\w+\s+(\w+)\s+(\w+)/){
        $cma_contigous = hex($1);
        $cma_total = hex($2);
    }
    $cma_total *= 4;
    $cma_contigous *= 4;

    #===ion_system=== part
    $part = get_part_meminfo_value($meminfostr, '(===ion_system===.*?\sorder)');
    my $ion_system_heap_total = get_meminfo_value($part, 'total:\s+\d+KB\s+used:\s+(\d+)KB');

    #===zram_info=== part
    $part = get_part_meminfo_value($meminfostr, '(===zram_info===.*?ZRAM used memory \(bytes\): \d+)');
    my $zram_used = get_meminfo_value($part, 'ZRAM used memory \(bytes\): (\d+)');
    $zram_used /= 1024;

    #===Dumpsys_Meminfo=== part
    $part = get_part_meminfo_value($meminfostr, '(===Dumpsys_Meminfo===.*?Tuning:)');
    my $zram_used1 = get_meminfo_value($part, 'ZRAM: (\d+)');
    my $zram_swapped = get_meminfo_value($part, 'ZRAM: \d+ kB physical used for (\d+) kB');
    my $zram_saved = $zram_swapped - $zram_used1;
    my $ksm_saved = get_meminfo_value($part, 'KSM: (\d+) kB');
    my $lost_ram = get_meminfo_value($part, 'Lost RAM: (\d+) kB');

    #===vmallocinfo=== part
    $part = get_part_meminfo_value($meminfostr, '(===vmallocinfo===.*?===end vmallocinfo===)');
    my $vmalloc_total = 0;
    while($part =~ /.*?pages=(\d+) vmalloc/g){
        $vmalloc_total += $1;
    }
    my $vmalloc_modules = 0;
    while($part =~ /module.*?pages=(\d+) vmalloc/g){
        $vmalloc_modules += $1;
    }
    my $vmalloc_logcat = 0;
    while($part =~ /create_log.*?pages=(\d+) vmalloc/g){
        $vmalloc_logcat += $1;
    }
    my $vmalloc_gc = 0;
    while($part =~ /gckOS.*?pages=(\d+) vmalloc/g){
        $vmalloc_gc += $1;
    }

    #need caluate value
    #cal
    my $ddrtotal         = int(($mem_memtotal + 256*1024-1)/(256*1024))*(256*1024);
    my $free_cache_buffer= $mem_memfree + $mem_cached + $mem_buffers;
    my $realfree         = $free_cache_buffer - $mem_mapped;
    my $kernelused       = $mem_slab + $mem_pagetables + $mem_kernelstack;
    my $diff1            = $mem_active + $mem_inactive- ($mem_buffers
        + $mem_cached + $mem_swapcached + $mem_anonpages);
    my $meminfo_pss_total= $mem_anonpages + $mem_mapped;
    #cal
    my $gc_alloc         = $gc_contig+$gc_contignon+$gc_virtual;
    #cal
    my $kernel_others_total = $mem_memtotal - $kernelused
        - $meminfo_pss_total - $gc_alloc - $realfree;
    #cal
    $vmalloc_modules     *= 4;
    $vmalloc_logcat      *= 4;
    $vmalloc_gc          *= 4;
    $vmalloc_total       *= 4;
    my $vmalloc_others    = $vmalloc_total - $vmalloc_modules
        - $vmalloc_logcat - $vmalloc_gc;

    my $kernel_unknown    = $kernel_others_total - $cma_contigous
        - $vmalloc_total - $ion_system_heap_total - $zram_used;

    my %mem_result_hash=();
    $mem_result_hash{"ddrtotal"}                                = $ddrtotal;
    $mem_result_hash{"reservedmemory"}                          = $ddrtotal - $mem_memtotal;
    $mem_result_hash{"cmatotal"}                                = $cma_total;
    $mem_result_hash{"memfree"}                                 = $mem_memfree;
    $mem_result_hash{"cached"}                                  = $mem_cached;
    $mem_result_hash{"buffers"}                                 = $mem_buffers;
    $mem_result_hash{"free_cache_buffer"}                       = $free_cache_buffer;
    $mem_result_hash{"realfree"}                                = $realfree;
    $mem_result_hash{"kernelused"}                              = $kernelused;
    $mem_result_hash{"slab"}                                    = $mem_slab;
    $mem_result_hash{"pagetables"}                              = $mem_pagetables;
    $mem_result_hash{"kernelstack"}                             = $mem_kernelstack;
    $mem_result_hash{"cmacontigous"}                            = $cma_contigous;
    $mem_result_hash{"vmalloc_total"}                           = $vmalloc_total;
    $mem_result_hash{"vmalloc_modules"}                         = $vmalloc_modules;
    $mem_result_hash{"vmalloc_logcat"}                          = $vmalloc_logcat;
    $mem_result_hash{"vmalloc_logcat"}                          = $vmalloc_logcat;
    $mem_result_hash{"vmalloc_gc"}                              = $vmalloc_gc;
    $mem_result_hash{"vmalloc_others"}                          = $vmalloc_others;
    $mem_result_hash{"ion_system_heap_total"}                   = $ion_system_heap_total;
    $mem_result_hash{"zram_used"}                               = $zram_used;
    $mem_result_hash{"kernel_unknown"}                          = $kernel_unknown;
    $mem_result_hash{"gc_alloc"}                                = $gc_alloc;
    $mem_result_hash{"gc_total"}                                = $gc_total;
    $mem_result_hash{"pss_total"}                               = $pss_total;
    $mem_result_hash{"pss_total_filtered_debug_apps"}           = $pss_total - $pss_unnecessary;
    $mem_result_hash{"meminfo_pss_total"}                       = $meminfo_pss_total;
    $mem_result_hash{"meminfo_pss_total_filtered_debug_apps"}   = $meminfo_pss_total - $pss_unnecessary;
    $mem_result_hash{"zram_saved"}                              = $zram_saved;
    $mem_result_hash{"ksm_saved"}                               = $ksm_saved;
    $mem_result_hash{"diff1"}                                   = $diff1;

    return %mem_result_hash;
}#end sub parse

sub print_meminfo_size{
    my($title, $value) = @_;
    printf "$title: %d KB (%.1f MB)\n", $value, convert_MB_to_KB($value);
}

sub convert_MB_to_KB{
    my($value) = @_;
    return $value/1024;
}

sub print_mempower_summary{
    my($mem_result_hash) = @_;
    printf "ddr_size:%s KB\n",                        ${$mem_result_hash}{"ddrtotal"};
    printf "reserved_memory:%s KB\n",                 ${$mem_result_hash}{"reservedmemory"};
    printf "cma_total:%s KB\n",                       ${$mem_result_hash}{"cmatotal"};
    printf "free:%s KB\n",                            ${$mem_result_hash}{"memfree"};
    printf "cached:%s KB\n",                          ${$mem_result_hash}{"cached"};
    printf "buffers:%s KB\n",                         ${$mem_result_hash}{"buffers"};
    printf "free_cached_buffers:%s KB\n",             ${$mem_result_hash}{"free_cache_buffer"};
    printf "real_free:%s KB\n",                       ${$mem_result_hash}{"realfree"};
    printf "kernel_used:%s KB\n",                     ${$mem_result_hash}{"kernelused"};
    printf "slab:%s KB\n",                            ${$mem_result_hash}{"slab"};
    printf "page_tables:%s KB\n",                     ${$mem_result_hash}{"pagetables"};
    printf "kernel_stack:%s KB\n",                    ${$mem_result_hash}{"kernelstack"};
    printf "cma_contigous:%s KB\n",                   ${$mem_result_hash}{"cmacontigous"};
    printf "vmalloc_total:%s KB\n",                   ${$mem_result_hash}{"vmalloc_total"};
    printf "vmalloc_modules:%s KB\n",                 ${$mem_result_hash}{"vmalloc_modules"};
    printf "vmalloc_logcat:%s KB\n",                  ${$mem_result_hash}{"vmalloc_logcat"};
    printf "vmalloc_gc:%s KB\n",                      ${$mem_result_hash}{"vmalloc_gc"};
    printf "vmalloc_others:%s KB\n",                  ${$mem_result_hash}{"vmalloc_others"};
    printf "ion_system_heap:%s KB\n",                 ${$mem_result_hash}{"ion_system_heap_total"};
    printf "zram_used:%d KB\n",                       ${$mem_result_hash}{"zram_used"};
    printf "unknown:%s KB\n",                         ${$mem_result_hash}{"kernel_unknown"};
    printf "gc_allocate:%s KB\n",                     ${$mem_result_hash}{"gc_alloc"};
    printf "gc_total:%s KB\n",                        ${$mem_result_hash}{"gc_total"};
    printf "procrank_pss:%s KB\n",                    ${$mem_result_hash}{"pss_total"};
    printf "procrankpss_filtered_debug_apps:%s KB\n", ${$mem_result_hash}{"pss_total_filtered_debug_apps"};
    printf "meminfo_pss:%s KB\n",                     ${$mem_result_hash}{"meminfo_pss_total"};
    printf "meminfopss_filtered_debug_apps:%s KB\n",  ${$mem_result_hash}{"meminfo_pss_total_filtered_debug_apps"};
    printf "zram_saved:%d KB\n",                      ${$mem_result_hash}{"zram_saved"};
    printf "ksm_saved:%d KB\n",                       ${$mem_result_hash}{"ksm_saved"};
}

sub print_mem_summary{
    my($mem_result_hash, $file) = @_;

    printf "$file:\n-----------------\n";

    printf "\nBasic info:\n";
    print_meminfo_size("DDR size", ${$mem_result_hash}{"ddrtotal"});
    print_meminfo_size("Reserved memory", ${$mem_result_hash}{"reservedmemory"});
    print_meminfo_size("CMA total", ${$mem_result_hash}{"cmatotal"});
    print_meminfo_size("Free", ${$mem_result_hash}{"memfree"});
    print_meminfo_size("Cached",${$mem_result_hash}{"cached"});
    print_meminfo_size("Buffers",${$mem_result_hash}{"buffers"});
    print_meminfo_size("Free+Cached+Buffers",${$mem_result_hash}{"free_cache_buffer"});
    print_meminfo_size("Real Free",${$mem_result_hash}{"realfree"});
    printf "\nKernel:\n";
    print_meminfo_size ("Kernel Used", ${$mem_result_hash}{"kernelused"});
    print_meminfo_size ("  slab", ${$mem_result_hash}{"slab"});
    print_meminfo_size ("  pagetables", ${$mem_result_hash}{"pagetables"});
    print_meminfo_size ("  kernelstack", ${$mem_result_hash}{"kernelstack"});
    printf "\nKernel Others:\n";
    print_meminfo_size ("  CMA contigous", ${$mem_result_hash}{"cmacontigous"});
    print_meminfo_size ("  vmalloc total", ${$mem_result_hash}{"vmalloc_total"});
    print_meminfo_size ("    modules", ${$mem_result_hash}{"vmalloc_modules"});
    print_meminfo_size ("    logcat", ${$mem_result_hash}{"vmalloc_logcat"});
    print_meminfo_size ("    gc", ${$mem_result_hash}{"vmalloc_gc"});
    print_meminfo_size ("    others", ${$mem_result_hash}{"vmalloc_others"});
    print_meminfo_size ("  ION system heap", ${$mem_result_hash}{"ion_system_heap_total"});
    print_meminfo_size ("  zRAM used", ${$mem_result_hash}{"zram_used"});
    print_meminfo_size ("  Unknown", ${$mem_result_hash}{"kernel_unknown"});
    printf "\nGC:\n";
    print_meminfo_size ("GC Allocate", ${$mem_result_hash}{"gc_alloc"});
    print_meminfo_size ("GC Total", ${$mem_result_hash}{"gc_total"});
    printf "\nPss:\n";
    print_meminfo_size ("Procrank Pss Total", ${$mem_result_hash}{"pss_total"});
    print_meminfo_size ("Procrank Pss Total (filtered debug apps)", ${$mem_result_hash}{"pss_total_filtered_debug_apps"});
    print_meminfo_size ("/proc/meminfo Pss Total", ${$mem_result_hash}{"meminfo_pss_total"});
    print_meminfo_size ("/proc/meminfo Pss Total (filtered debug apps)", ${$mem_result_hash}{"meminfo_pss_total_filtered_debug_apps"});
    printf "\nSaved:\n";
    print_meminfo_size ("zRAM saved", ${$mem_result_hash}{"zram_saved"});
    print_meminfo_size ("KSM saved", ${$mem_result_hash}{"ksm_saved"});
    printf "\nDebug:\n";
    print_meminfo_size ("Diff1", ${$mem_result_hash}{"diff1"});
}

sub parse_raw_data_file{
    my($rawdatafile) = @_;
    local $/ = undef;
    open FILE, $rawdatafile or die "Couldn't open file: $!'";
    $meminfostr = <FILE>;
    close FILE;

    my %mem_result_hash = parse($meminfostr);

    return %mem_result_hash;
}

#collect memory info
sub collect{

    my @print_info_array = (
    {
        "command" =>
"'if [[ -d /sys/kernel/mm/ksm ]]; then
    cd /sys/kernel/mm/ksm
    for i in *; do
        echo -n \"\$i: \"
        cat \$i
    done
fi'",
        "title"   => "KSM info",
        "description" => "",
    },
    {
        "command" => "cat /sys/block/zram0/mem_used_total",
        "title"   => "zram_info",
        "description" => "ZRAM used memory (bytes): ",
    },
    {
        "command" => "cat /proc/meminfo",
        "title"   => "meminfo",
        "description" => "",
    },
    {
        "command" => "cat /proc/driver/gc",
        "title"   => "gc",
        "description" => "",
    },
    {
        "command" =>
"'if [[ -d /proc/driver/gcmem ]]; then
    cd /proc/driver/gcmem
    for i in *; do
        echo -n \"\$i: \"
        cat \$i
    done
fi'",
        "title"   => "gcmem info",
        "description" => "",
    },
    {
        "command" => "cat /sys/module/lowmemorykiller/parameters/adj",
        "title"   => "LMK_adj",
        "description" => "",
    },
    {
        "command" => "cat /sys/module/lowmemorykiller/parameters/minfree",
        "title"   => "LMK_minfree",
        "description" => "",
    },
    {
        "command" => "procrank",
        "title"   => "procrank",
        "description" => "",
    },
    {
        "command" => "librank",
        "title"   => "librank",
        "description" => "",
    },
    {
        "command" => "cat /proc/iomem",
        "title"   => "iomem",
        "description" => "",
    },
    {
        "command" => "cat /proc/vmallocinfo",
        "title"   => "vmallocinfo",
        "description" => "",
    },
    {
        "command" => "cat /proc/vmstat",
        "title"   => "vmstat",
        "description" => "",
    },
    {
        "command" => "cat /proc/zoneinfo",
        "title"   => "zoneinfo",
        "description" => "",
    },
    {
        "command" => "cat /proc/buddyinfo",
        "title"   => "buddyinfo",
        "description" => "",
    },
    {
        "command" => "cat /proc/pagetypeinfo",
        "title"   => "pagetypeinfo",
        "description" => "",
    },
    {
        "command" => "cat /proc/cmainfo",
        "title"   => "cmainfo",
        "description" => "",
    },
    {
        "command" => "cat /proc/slabinfo",
        "title"   => "slabinfo",
        "description" => "",
    },
    {
        "command" => "showslab -s c",
        "title"   => "showslab ",
        "description" => "",
    },
    {
        "command" => "slabinfo -a",
        "title"   => "slabinfo_alias",
        "description" => "",
    },
    {
        "command" => "slabinfo",
        "title"   => "slabinfo_list",
        "description" => "",
    },
    {
        "command" => "sysctl -a",
        "title"   => "sysctl",
        "description" => "",
    },
    {
        "command" =>
"'if [[ -d /proc/sys/vm ]]; then
    cd /proc/sys/vm
    for i in *; do
        echo -n \"\$i: \"
        cat \$i
    done
fi'",
        "title"   => "sysctl_vm",
        "description" => "",
    },
    {
        "command" => "cat /sys/kernel/debug/memblock/memory",
        "title"   => "memblock",
        "description" => "",
    },
    {
        "command" => "cat /sys/kernel/debug/memblock/reserved",
        "title"   => "memblock_reserved",
        "description" => "",
    },
    {
        "command" => "cat /sys/kernel/debug/ion/heaps/carveout_heap",
        "title"   => "ion_carveout",
        "description" => "",
    },
    {
        "command" => "cat /sys/kernel/debug/ion/heaps/system_heap",
        "title"   => "ion_system",
        "description" => "",
    },
    {
        "command" => "dumpsys SurfaceFlinger",
        "title"   => "Dumpsys_SurfaceFlinger",
        "description" => "",
    },
    {
        "command" => "dumpsys meminfo -a",
        "title"   => "Dumpsys_Meminfo",
        "description" => "",
    },
    {
        "command" => "dumpsys procstats",
        "title"   => "Dumpsys_Procstats ",
        "description" => "",
    },
    {
        "command" => "dumpsys activity oom",
        "title"   => "Dumpsys_OOM",
        "description" => "",
    },
    {
        "command" =>
"'cd /proc
for i in *; do
    if [ -f \$i/smaps ]; then
        echo \"PID: \$i\"
        cat /proc/\$i/cmdline
        showmap \$i
    fi
done'",
        "title"   => "showmap",
        "description" => "",
    },
    {
        "command" =>
"'cd /proc
for i in *; do
    if [ -f \$i/smaps ]; then
        echo \"PID: \$i\"
        cat /proc/\$i/cmdline
        echo
        cat /proc/\$i/smaps
    fi
done'",
        "title"   => "smap",
        "description" => "",
    },
    );#end @print_info_array

    my $ret="";
    $ret = `$adb_s_id_root`;
    my $adb_mount_debugfs = "mount -t debugfs debugfs /sys/kernel/debug";
    #debugfs info, need mount first
    $ret = adb_shell($adb_mount_debugfs);

    my $meminfostr = "";
    $meminfostr .= "----- Memory Info -----\n";
    $meminfostr .= print_current_datetime();

    $meminfostr .= print_version_info();

    $meminfostr .= print_kk_related_info();

    foreach $print_info_hash (@print_info_array){
        my $title = ${$print_info_hash}{"title"};
        my $command = ${$print_info_hash}{"command"};
        my $description = ${$print_info_hash}{"description"};
        #call print info function
        $meminfostr .= print_info($command, $title, $description);
    }#end foreach()

    $meminfostr .= "----- Memory Info end -----\n";

    return $meminfostr;
}

sub print_hex {
    my ($str) = @_;
    my @arr = split //, $str;
    for my $c (@arr) {
        printf "<%x>", ord($c);
    }
    printf "\n";
}

sub print_current_datetime{
    $str = "";
    my $current_datetime = strftime("%Y-%m-%d %H:%M:%S", localtime());
    $str .= "$current_datetime\n";

    return $str;
}

sub print_version_info{
    $str = "";
    my $getprop_build_display_id = "getprop ro.build.display.id";
    my $cat_proc_version = "cat /proc/version";
    my $cat_build_prop = "cat /system/build.prop";

    my $build_display_id = adb_shell($getprop_build_display_id);
    $str .= "$build_display_id\n";

    my $proc_version = adb_shell($cat_proc_version);
    $str .= "$proc_version\n";

    my $build_prop = adb_shell($cat_build_prop);
    $str .= "$build_prop\n";

    return $str;
}

sub print_kk_related_info{
    my $str = "";
    my $getprop_extra_free_kbytes = "getprop sys.sysctl.extra_free_kbytes";
    my $getprop_low_ram = "getprop ro.config.low_ram";
    my $getprop_codecachesize = "getprop dalvik.vm.jit.codecachesize";

    my $extra_free_kbytes = adb_shell($getprop_extra_free_kbytes);
    my $low_ram = adb_shell($getprop_low_ram);
    my $codecachesize = adb_shell($getprop_codecachesize);

    $str .= "\nKK related info:\n";

    $str .= "sys.sysctl.extra_free_kbytes: $extra_free_kbytes\n";
    $str .= "ro.config.low_ram: $low_ram\n";
    $str .= "dalvik.vm.jit.codecachesize: $codecachesize\n";

    return $str;
}

sub print_info{
    my $str = "";
    my($command, $title, $description) = @_;
    my $output = adb_shell($command);
    $str .= "\n===$title===\n";
    $str .= "$description"."$output";
    $str .= "\n===end $title===\n";
    return $str;
}

sub version{
    printf "meminfo version %s\n\n",$version;
}

sub usage{
    printf "$prog [--parse-raw parsefile] [--raw savefile] [-s adbid]

general options:
    --help          | -h    usage message
    --version       | -v    version number and copyright
    --spec-device   | -s    adb device id
    --raw           | -r    save the raw data to a file
    --parse-raw     | -p    parse  a raw data file
    --format        | -f    summary result print out format[power|other]\n\n";
}

sub main{
    #adb command
    if($adbid){
        #if set adb id
        $adb_s_id_root  = "adb -s $adbid root";
        $adb_s_id_shell = "adb -s $adbid shell";
    }

    #parse the raw data file
    if($rawdatafile){
        my %mem_result_hash = parse_raw_data_file($rawdatafile);
        if($format eq "power"){
            #when power test collect the memory use power format summary
            print_mempower_summary(\%mem_result_hash);
        }else{
            #other format summary print KB (MB)
            print_mem_summary(\%mem_result_hash, $rawdatafile);
        }

        return 0;
    }

    #collect memory info and return a raw data string
    my $meminfostr = collect();

    if($savefile){
        #if save file will save memory info to a file
        open SAVEFILE, ">$savefile" or die "Can't open $savefile for write: $!";
        $| = 1;
        print SAVEFILE $meminfostr;
        close(SAVEFILE);
    }

    #not save file will parse memory info
    my %mem_result_hash = parse($meminfostr);
    if($format eq "power"){
        print_mempower_summary(\%mem_result_hash);
    }else{
        print_mem_summary(\%mem_result_hash);
    }

    return 0;
}#end main()

unless (GetOptions(
    "help|h"               => sub{&usage(); exit RET_OK;},
    "version|v"            => sub{&version(); exit RET_OK;},
    "format|f=s"           => \$format,
    "spec-device|s=s"      => \$adbid,
    "raw|r=s"              => \$savefile,
    "parse-raw|p=s"        => \$rawdatafile,
    )){
    &usage();
    exit RET_INVALID_CALL;
}
main();
