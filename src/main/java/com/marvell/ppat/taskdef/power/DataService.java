/**
 * Autogenerated by Thrift Compiler (0.9.2)
 * <p>
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *
 * @generated
 */
package com.marvell.ppat.taskdef.power;

import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.server.AbstractNonblockingServer;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.ArrayList;
import java.util.BitSet;
import java.util.Collections;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Generated;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-3-9")
public class DataService {

    public interface Iface {

        public void measurePower(int sample_t, int voltage, String file_n, String port) throws org.apache.thrift.TException;

        public Map<String, String> getResult(String file_n, boolean avg_bat, boolean avg_vcc, boolean min_vcc) throws org.apache.thrift.TException;

        public void runCmd(String cmd, String file_n) throws org.apache.thrift.TException;

    }

    public interface AsyncIface {

        public void measurePower(int sample_t, int voltage, String file_n, String port, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

        public void getResult(String file_n, boolean avg_bat, boolean avg_vcc, boolean min_vcc, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

        public void runCmd(String cmd, String file_n, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    }

    public static class Client extends org.apache.thrift.TServiceClient implements Iface {
        public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
            public Factory() {
            }

            public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
                return new Client(prot);
            }

            public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
                return new Client(iprot, oprot);
            }
        }

        public Client(org.apache.thrift.protocol.TProtocol prot) {
            super(prot, prot);
        }

        public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
            super(iprot, oprot);
        }

        public void measurePower(int sample_t, int voltage, String file_n, String port) throws org.apache.thrift.TException {
            send_measurePower(sample_t, voltage, file_n, port);
            recv_measurePower();
        }

        public void send_measurePower(int sample_t, int voltage, String file_n, String port) throws org.apache.thrift.TException {
            measurePower_args args = new measurePower_args();
            args.setSample_t(sample_t);
            args.setVoltage(voltage);
            args.setFile_n(file_n);
            args.setPort(port);
            sendBase("measurePower", args);
        }

        public void recv_measurePower() throws org.apache.thrift.TException {
            measurePower_result result = new measurePower_result();
            receiveBase(result, "measurePower");
            return;
        }

        public Map<String, String> getResult(String file_n, boolean avg_bat, boolean avg_vcc, boolean min_vcc) throws org.apache.thrift.TException {
            send_getResult(file_n, avg_bat, avg_vcc, min_vcc);
            return recv_getResult();
        }

        public void send_getResult(String file_n, boolean avg_bat, boolean avg_vcc, boolean min_vcc) throws org.apache.thrift.TException {
            getResult_args args = new getResult_args();
            args.setFile_n(file_n);
            args.setAvg_bat(avg_bat);
            args.setAvg_vcc(avg_vcc);
            args.setMin_vcc(min_vcc);
            sendBase("getResult", args);
        }

        public Map<String, String> recv_getResult() throws org.apache.thrift.TException {
            getResult_result result = new getResult_result();
            receiveBase(result, "getResult");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getResult failed: unknown result");
        }

        public void runCmd(String cmd, String file_n) throws org.apache.thrift.TException {
            send_runCmd(cmd, file_n);
            recv_runCmd();
        }

        public void send_runCmd(String cmd, String file_n) throws org.apache.thrift.TException {
            runCmd_args args = new runCmd_args();
            args.setCmd(cmd);
            args.setFile_n(file_n);
            sendBase("runCmd", args);
        }

        public void recv_runCmd() throws org.apache.thrift.TException {
            runCmd_result result = new runCmd_result();
            receiveBase(result, "runCmd");
            return;
        }

    }

    public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
        public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
            private org.apache.thrift.async.TAsyncClientManager clientManager;
            private org.apache.thrift.protocol.TProtocolFactory protocolFactory;

            public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
                this.clientManager = clientManager;
                this.protocolFactory = protocolFactory;
            }

            public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
                return new AsyncClient(protocolFactory, clientManager, transport);
            }
        }

        public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
            super(protocolFactory, clientManager, transport);
        }

        public void measurePower(int sample_t, int voltage, String file_n, String port, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
            checkReady();
            measurePower_call method_call = new measurePower_call(sample_t, voltage, file_n, port, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class measurePower_call extends org.apache.thrift.async.TAsyncMethodCall {
            private int sample_t;
            private int voltage;
            private String file_n;
            private String port;

            public measurePower_call(int sample_t, int voltage, String file_n, String port, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.sample_t = sample_t;
                this.voltage = voltage;
                this.file_n = file_n;
                this.port = port;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("measurePower", org.apache.thrift.protocol.TMessageType.CALL, 0));
                measurePower_args args = new measurePower_args();
                args.setSample_t(sample_t);
                args.setVoltage(voltage);
                args.setFile_n(file_n);
                args.setPort(port);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public void getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                (new Client(prot)).recv_measurePower();
            }
        }

        public void getResult(String file_n, boolean avg_bat, boolean avg_vcc, boolean min_vcc, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
            checkReady();
            getResult_call method_call = new getResult_call(file_n, avg_bat, avg_vcc, min_vcc, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class getResult_call extends org.apache.thrift.async.TAsyncMethodCall {
            private String file_n;
            private boolean avg_bat;
            private boolean avg_vcc;
            private boolean min_vcc;

            public getResult_call(String file_n, boolean avg_bat, boolean avg_vcc, boolean min_vcc, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.file_n = file_n;
                this.avg_bat = avg_bat;
                this.avg_vcc = avg_vcc;
                this.min_vcc = min_vcc;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getResult", org.apache.thrift.protocol.TMessageType.CALL, 0));
                getResult_args args = new getResult_args();
                args.setFile_n(file_n);
                args.setAvg_bat(avg_bat);
                args.setAvg_vcc(avg_vcc);
                args.setMin_vcc(min_vcc);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public Map<String, String> getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_getResult();
            }
        }

        public void runCmd(String cmd, String file_n, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
            checkReady();
            runCmd_call method_call = new runCmd_call(cmd, file_n, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class runCmd_call extends org.apache.thrift.async.TAsyncMethodCall {
            private String cmd;
            private String file_n;

            public runCmd_call(String cmd, String file_n, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.cmd = cmd;
                this.file_n = file_n;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("runCmd", org.apache.thrift.protocol.TMessageType.CALL, 0));
                runCmd_args args = new runCmd_args();
                args.setCmd(cmd);
                args.setFile_n(file_n);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public void getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                (new Client(prot)).recv_runCmd();
            }
        }

    }

    public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
        private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());

        public Processor(I iface) {
            super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
        }

        protected Processor(I iface, Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
            super(iface, getProcessMap(processMap));
        }

        private static <I extends Iface> Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
            processMap.put("measurePower", new measurePower());
            processMap.put("getResult", new getResult());
            processMap.put("runCmd", new runCmd());
            return processMap;
        }

        public static class measurePower<I extends Iface> extends org.apache.thrift.ProcessFunction<I, measurePower_args> {
            public measurePower() {
                super("measurePower");
            }

            public measurePower_args getEmptyArgsInstance() {
                return new measurePower_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public measurePower_result getResult(I iface, measurePower_args args) throws org.apache.thrift.TException {
                measurePower_result result = new measurePower_result();
                iface.measurePower(args.sample_t, args.voltage, args.file_n, args.port);
                return result;
            }
        }

        public static class getResult<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getResult_args> {
            public getResult() {
                super("getResult");
            }

            public getResult_args getEmptyArgsInstance() {
                return new getResult_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public getResult_result getResult(I iface, getResult_args args) throws org.apache.thrift.TException {
                getResult_result result = new getResult_result();
                result.success = iface.getResult(args.file_n, args.avg_bat, args.avg_vcc, args.min_vcc);
                return result;
            }
        }

        public static class runCmd<I extends Iface> extends org.apache.thrift.ProcessFunction<I, runCmd_args> {
            public runCmd() {
                super("runCmd");
            }

            public runCmd_args getEmptyArgsInstance() {
                return new runCmd_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public runCmd_result getResult(I iface, runCmd_args args) throws org.apache.thrift.TException {
                runCmd_result result = new runCmd_result();
                iface.runCmd(args.cmd, args.file_n);
                return result;
            }
        }

    }

    public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
        private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());

        public AsyncProcessor(I iface) {
            super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
        }

        protected AsyncProcessor(I iface, Map<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> processMap) {
            super(iface, getProcessMap(processMap));
        }

        private static <I extends AsyncIface> Map<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> getProcessMap(Map<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> processMap) {
            processMap.put("measurePower", new measurePower());
            processMap.put("getResult", new getResult());
            processMap.put("runCmd", new runCmd());
            return processMap;
        }

        public static class measurePower<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, measurePower_args, Void> {
            public measurePower() {
                super("measurePower");
            }

            public measurePower_args getEmptyArgsInstance() {
                return new measurePower_args();
            }

            public AsyncMethodCallback<Void> getResultHandler(final AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new AsyncMethodCallback<Void>() {
                    public void onComplete(Void o) {
                        measurePower_result result = new measurePower_result();
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                            return;
                        } catch (Exception e) {
                            LOGGER.error("Exception writing to internal frame buffer", e);
                        }
                        fb.close();
                    }

                    public void onError(Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TBase msg;
                        measurePower_result result = new measurePower_result();
                        {
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                            return;
                        } catch (Exception ex) {
                            LOGGER.error("Exception writing to internal frame buffer", ex);
                        }
                        fb.close();
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, measurePower_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
                iface.measurePower(args.sample_t, args.voltage, args.file_n, args.port, resultHandler);
            }
        }

        public static class getResult<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getResult_args, Map<String, String>> {
            public getResult() {
                super("getResult");
            }

            public getResult_args getEmptyArgsInstance() {
                return new getResult_args();
            }

            public AsyncMethodCallback<Map<String, String>> getResultHandler(final AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new AsyncMethodCallback<Map<String, String>>() {
                    public void onComplete(Map<String, String> o) {
                        getResult_result result = new getResult_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                            return;
                        } catch (Exception e) {
                            LOGGER.error("Exception writing to internal frame buffer", e);
                        }
                        fb.close();
                    }

                    public void onError(Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TBase msg;
                        getResult_result result = new getResult_result();
                        {
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                            return;
                        } catch (Exception ex) {
                            LOGGER.error("Exception writing to internal frame buffer", ex);
                        }
                        fb.close();
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, getResult_args args, org.apache.thrift.async.AsyncMethodCallback<Map<String, String>> resultHandler) throws TException {
                iface.getResult(args.file_n, args.avg_bat, args.avg_vcc, args.min_vcc, resultHandler);
            }
        }

        public static class runCmd<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, runCmd_args, Void> {
            public runCmd() {
                super("runCmd");
            }

            public runCmd_args getEmptyArgsInstance() {
                return new runCmd_args();
            }

            public AsyncMethodCallback<Void> getResultHandler(final AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new AsyncMethodCallback<Void>() {
                    public void onComplete(Void o) {
                        runCmd_result result = new runCmd_result();
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                            return;
                        } catch (Exception e) {
                            LOGGER.error("Exception writing to internal frame buffer", e);
                        }
                        fb.close();
                    }

                    public void onError(Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TBase msg;
                        runCmd_result result = new runCmd_result();
                        {
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                            return;
                        } catch (Exception ex) {
                            LOGGER.error("Exception writing to internal frame buffer", ex);
                        }
                        fb.close();
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, runCmd_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
                iface.runCmd(args.cmd, args.file_n, resultHandler);
            }
        }

    }

    public static class measurePower_args implements org.apache.thrift.TBase<measurePower_args, measurePower_args._Fields>, java.io.Serializable, Cloneable, Comparable<measurePower_args> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("measurePower_args");

        private static final org.apache.thrift.protocol.TField SAMPLE_T_FIELD_DESC = new org.apache.thrift.protocol.TField("sample_t", org.apache.thrift.protocol.TType.I32, (short) 1);
        private static final org.apache.thrift.protocol.TField VOLTAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("voltage", org.apache.thrift.protocol.TType.I32, (short) 2);
        private static final org.apache.thrift.protocol.TField FILE_N_FIELD_DESC = new org.apache.thrift.protocol.TField("file_n", org.apache.thrift.protocol.TType.STRING, (short) 3);
        private static final org.apache.thrift.protocol.TField PORT_FIELD_DESC = new org.apache.thrift.protocol.TField("port", org.apache.thrift.protocol.TType.STRING, (short) 4);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new measurePower_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new measurePower_argsTupleSchemeFactory());
        }

        public int sample_t; // required
        public int voltage; // required
        public String file_n; // required
        public String port; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SAMPLE_T((short) 1, "sample_t"),
            VOLTAGE((short) 2, "voltage"),
            FILE_N((short) 3, "file_n"),
            PORT((short) 4, "port");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // SAMPLE_T
                        return SAMPLE_T;
                    case 2: // VOLTAGE
                        return VOLTAGE;
                    case 3: // FILE_N
                        return FILE_N;
                    case 4: // PORT
                        return PORT;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __SAMPLE_T_ISSET_ID = 0;
        private static final int __VOLTAGE_ISSET_ID = 1;
        private byte __isset_bitfield = 0;
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SAMPLE_T, new org.apache.thrift.meta_data.FieldMetaData("sample_t", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.VOLTAGE, new org.apache.thrift.meta_data.FieldMetaData("voltage", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.FILE_N, new org.apache.thrift.meta_data.FieldMetaData("file_n", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.PORT, new org.apache.thrift.meta_data.FieldMetaData("port", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(measurePower_args.class, metaDataMap);
        }

        public measurePower_args() {
        }

        public measurePower_args(
                int sample_t,
                int voltage,
                String file_n,
                String port) {
            this();
            this.sample_t = sample_t;
            setSample_tIsSet(true);
            this.voltage = voltage;
            setVoltageIsSet(true);
            this.file_n = file_n;
            this.port = port;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public measurePower_args(measurePower_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.sample_t = other.sample_t;
            this.voltage = other.voltage;
            if (other.isSetFile_n()) {
                this.file_n = other.file_n;
            }
            if (other.isSetPort()) {
                this.port = other.port;
            }
        }

        public measurePower_args deepCopy() {
            return new measurePower_args(this);
        }

        @Override
        public void clear() {
            setSample_tIsSet(false);
            this.sample_t = 0;
            setVoltageIsSet(false);
            this.voltage = 0;
            this.file_n = null;
            this.port = null;
        }

        public int getSample_t() {
            return this.sample_t;
        }

        public measurePower_args setSample_t(int sample_t) {
            this.sample_t = sample_t;
            setSample_tIsSet(true);
            return this;
        }

        public void unsetSample_t() {
            __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SAMPLE_T_ISSET_ID);
        }

        /** Returns true if field sample_t is set (has been assigned a value) and false otherwise */
        public boolean isSetSample_t() {
            return EncodingUtils.testBit(__isset_bitfield, __SAMPLE_T_ISSET_ID);
        }

        public void setSample_tIsSet(boolean value) {
            __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SAMPLE_T_ISSET_ID, value);
        }

        public int getVoltage() {
            return this.voltage;
        }

        public measurePower_args setVoltage(int voltage) {
            this.voltage = voltage;
            setVoltageIsSet(true);
            return this;
        }

        public void unsetVoltage() {
            __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VOLTAGE_ISSET_ID);
        }

        /** Returns true if field voltage is set (has been assigned a value) and false otherwise */
        public boolean isSetVoltage() {
            return EncodingUtils.testBit(__isset_bitfield, __VOLTAGE_ISSET_ID);
        }

        public void setVoltageIsSet(boolean value) {
            __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VOLTAGE_ISSET_ID, value);
        }

        public String getFile_n() {
            return this.file_n;
        }

        public measurePower_args setFile_n(String file_n) {
            this.file_n = file_n;
            return this;
        }

        public void unsetFile_n() {
            this.file_n = null;
        }

        /** Returns true if field file_n is set (has been assigned a value) and false otherwise */
        public boolean isSetFile_n() {
            return this.file_n != null;
        }

        public void setFile_nIsSet(boolean value) {
            if (!value) {
                this.file_n = null;
            }
        }

        public String getPort() {
            return this.port;
        }

        public measurePower_args setPort(String port) {
            this.port = port;
            return this;
        }

        public void unsetPort() {
            this.port = null;
        }

        /** Returns true if field port is set (has been assigned a value) and false otherwise */
        public boolean isSetPort() {
            return this.port != null;
        }

        public void setPortIsSet(boolean value) {
            if (!value) {
                this.port = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case SAMPLE_T:
                    if (value == null) {
                        unsetSample_t();
                    } else {
                        setSample_t((Integer) value);
                    }
                    break;

                case VOLTAGE:
                    if (value == null) {
                        unsetVoltage();
                    } else {
                        setVoltage((Integer) value);
                    }
                    break;

                case FILE_N:
                    if (value == null) {
                        unsetFile_n();
                    } else {
                        setFile_n((String) value);
                    }
                    break;

                case PORT:
                    if (value == null) {
                        unsetPort();
                    } else {
                        setPort((String) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case SAMPLE_T:
                    return Integer.valueOf(getSample_t());

                case VOLTAGE:
                    return Integer.valueOf(getVoltage());

                case FILE_N:
                    return getFile_n();

                case PORT:
                    return getPort();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case SAMPLE_T:
                    return isSetSample_t();
                case VOLTAGE:
                    return isSetVoltage();
                case FILE_N:
                    return isSetFile_n();
                case PORT:
                    return isSetPort();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof measurePower_args)
                return this.equals((measurePower_args) that);
            return false;
        }

        public boolean equals(measurePower_args that) {
            if (that == null)
                return false;

            boolean this_present_sample_t = true;
            boolean that_present_sample_t = true;
            if (this_present_sample_t || that_present_sample_t) {
                if (!(this_present_sample_t && that_present_sample_t))
                    return false;
                if (this.sample_t != that.sample_t)
                    return false;
            }

            boolean this_present_voltage = true;
            boolean that_present_voltage = true;
            if (this_present_voltage || that_present_voltage) {
                if (!(this_present_voltage && that_present_voltage))
                    return false;
                if (this.voltage != that.voltage)
                    return false;
            }

            boolean this_present_file_n = true && this.isSetFile_n();
            boolean that_present_file_n = true && that.isSetFile_n();
            if (this_present_file_n || that_present_file_n) {
                if (!(this_present_file_n && that_present_file_n))
                    return false;
                if (!this.file_n.equals(that.file_n))
                    return false;
            }

            boolean this_present_port = true && this.isSetPort();
            boolean that_present_port = true && that.isSetPort();
            if (this_present_port || that_present_port) {
                if (!(this_present_port && that_present_port))
                    return false;
                if (!this.port.equals(that.port))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            boolean present_sample_t = true;
            list.add(present_sample_t);
            if (present_sample_t)
                list.add(sample_t);

            boolean present_voltage = true;
            list.add(present_voltage);
            if (present_voltage)
                list.add(voltage);

            boolean present_file_n = true && (isSetFile_n());
            list.add(present_file_n);
            if (present_file_n)
                list.add(file_n);

            boolean present_port = true && (isSetPort());
            list.add(present_port);
            if (present_port)
                list.add(port);

            return list.hashCode();
        }

        @Override
        public int compareTo(measurePower_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetSample_t()).compareTo(other.isSetSample_t());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSample_t()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sample_t, other.sample_t);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetVoltage()).compareTo(other.isSetVoltage());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetVoltage()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.voltage, other.voltage);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetFile_n()).compareTo(other.isSetFile_n());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetFile_n()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.file_n, other.file_n);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetPort()).compareTo(other.isSetPort());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetPort()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.port, other.port);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("measurePower_args(");
            boolean first = true;

            sb.append("sample_t:");
            sb.append(this.sample_t);
            first = false;
            if (!first) sb.append(", ");
            sb.append("voltage:");
            sb.append(this.voltage);
            first = false;
            if (!first) sb.append(", ");
            sb.append("file_n:");
            if (this.file_n == null) {
                sb.append("null");
            } else {
                sb.append(this.file_n);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("port:");
            if (this.port == null) {
                sb.append("null");
            } else {
                sb.append(this.port);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class measurePower_argsStandardSchemeFactory implements SchemeFactory {
            public measurePower_argsStandardScheme getScheme() {
                return new measurePower_argsStandardScheme();
            }
        }

        private static class measurePower_argsStandardScheme extends StandardScheme<measurePower_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, measurePower_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // SAMPLE_T
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.sample_t = iprot.readI32();
                                struct.setSample_tIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // VOLTAGE
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.voltage = iprot.readI32();
                                struct.setVoltageIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 3: // FILE_N
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.file_n = iprot.readString();
                                struct.setFile_nIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 4: // PORT
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.port = iprot.readString();
                                struct.setPortIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, measurePower_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(SAMPLE_T_FIELD_DESC);
                oprot.writeI32(struct.sample_t);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(VOLTAGE_FIELD_DESC);
                oprot.writeI32(struct.voltage);
                oprot.writeFieldEnd();
                if (struct.file_n != null) {
                    oprot.writeFieldBegin(FILE_N_FIELD_DESC);
                    oprot.writeString(struct.file_n);
                    oprot.writeFieldEnd();
                }
                if (struct.port != null) {
                    oprot.writeFieldBegin(PORT_FIELD_DESC);
                    oprot.writeString(struct.port);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class measurePower_argsTupleSchemeFactory implements SchemeFactory {
            public measurePower_argsTupleScheme getScheme() {
                return new measurePower_argsTupleScheme();
            }
        }

        private static class measurePower_argsTupleScheme extends TupleScheme<measurePower_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, measurePower_args struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetSample_t()) {
                    optionals.set(0);
                }
                if (struct.isSetVoltage()) {
                    optionals.set(1);
                }
                if (struct.isSetFile_n()) {
                    optionals.set(2);
                }
                if (struct.isSetPort()) {
                    optionals.set(3);
                }
                oprot.writeBitSet(optionals, 4);
                if (struct.isSetSample_t()) {
                    oprot.writeI32(struct.sample_t);
                }
                if (struct.isSetVoltage()) {
                    oprot.writeI32(struct.voltage);
                }
                if (struct.isSetFile_n()) {
                    oprot.writeString(struct.file_n);
                }
                if (struct.isSetPort()) {
                    oprot.writeString(struct.port);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, measurePower_args struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(4);
                if (incoming.get(0)) {
                    struct.sample_t = iprot.readI32();
                    struct.setSample_tIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.voltage = iprot.readI32();
                    struct.setVoltageIsSet(true);
                }
                if (incoming.get(2)) {
                    struct.file_n = iprot.readString();
                    struct.setFile_nIsSet(true);
                }
                if (incoming.get(3)) {
                    struct.port = iprot.readString();
                    struct.setPortIsSet(true);
                }
            }
        }

    }

    public static class measurePower_result implements org.apache.thrift.TBase<measurePower_result, measurePower_result._Fields>, java.io.Serializable, Cloneable, Comparable<measurePower_result> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("measurePower_result");


        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new measurePower_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new measurePower_resultTupleSchemeFactory());
        }


        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(measurePower_result.class, metaDataMap);
        }

        public measurePower_result() {
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public measurePower_result(measurePower_result other) {
        }

        public measurePower_result deepCopy() {
            return new measurePower_result(this);
        }

        @Override
        public void clear() {
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof measurePower_result)
                return this.equals((measurePower_result) that);
            return false;
        }

        public boolean equals(measurePower_result that) {
            if (that == null)
                return false;

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            return list.hashCode();
        }

        @Override
        public int compareTo(measurePower_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("measurePower_result(");
            boolean first = true;

            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class measurePower_resultStandardSchemeFactory implements SchemeFactory {
            public measurePower_resultStandardScheme getScheme() {
                return new measurePower_resultStandardScheme();
            }
        }

        private static class measurePower_resultStandardScheme extends StandardScheme<measurePower_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, measurePower_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, measurePower_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class measurePower_resultTupleSchemeFactory implements SchemeFactory {
            public measurePower_resultTupleScheme getScheme() {
                return new measurePower_resultTupleScheme();
            }
        }

        private static class measurePower_resultTupleScheme extends TupleScheme<measurePower_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, measurePower_result struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, measurePower_result struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
            }
        }

    }

    public static class getResult_args implements org.apache.thrift.TBase<getResult_args, getResult_args._Fields>, java.io.Serializable, Cloneable, Comparable<getResult_args> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getResult_args");

        private static final org.apache.thrift.protocol.TField FILE_N_FIELD_DESC = new org.apache.thrift.protocol.TField("file_n", org.apache.thrift.protocol.TType.STRING, (short) 1);
        private static final org.apache.thrift.protocol.TField AVG_BAT_FIELD_DESC = new org.apache.thrift.protocol.TField("avg_bat", org.apache.thrift.protocol.TType.BOOL, (short) 2);
        private static final org.apache.thrift.protocol.TField AVG_VCC_FIELD_DESC = new org.apache.thrift.protocol.TField("avg_vcc", org.apache.thrift.protocol.TType.BOOL, (short) 3);
        private static final org.apache.thrift.protocol.TField MIN_VCC_FIELD_DESC = new org.apache.thrift.protocol.TField("min_vcc", org.apache.thrift.protocol.TType.BOOL, (short) 4);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new getResult_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new getResult_argsTupleSchemeFactory());
        }

        public String file_n; // required
        public boolean avg_bat; // required
        public boolean avg_vcc; // required
        public boolean min_vcc; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            FILE_N((short) 1, "file_n"),
            AVG_BAT((short) 2, "avg_bat"),
            AVG_VCC((short) 3, "avg_vcc"),
            MIN_VCC((short) 4, "min_vcc");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // FILE_N
                        return FILE_N;
                    case 2: // AVG_BAT
                        return AVG_BAT;
                    case 3: // AVG_VCC
                        return AVG_VCC;
                    case 4: // MIN_VCC
                        return MIN_VCC;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __AVG_BAT_ISSET_ID = 0;
        private static final int __AVG_VCC_ISSET_ID = 1;
        private static final int __MIN_VCC_ISSET_ID = 2;
        private byte __isset_bitfield = 0;
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.FILE_N, new org.apache.thrift.meta_data.FieldMetaData("file_n", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.AVG_BAT, new org.apache.thrift.meta_data.FieldMetaData("avg_bat", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
            tmpMap.put(_Fields.AVG_VCC, new org.apache.thrift.meta_data.FieldMetaData("avg_vcc", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
            tmpMap.put(_Fields.MIN_VCC, new org.apache.thrift.meta_data.FieldMetaData("min_vcc", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getResult_args.class, metaDataMap);
        }

        public getResult_args() {
        }

        public getResult_args(
                String file_n,
                boolean avg_bat,
                boolean avg_vcc,
                boolean min_vcc) {
            this();
            this.file_n = file_n;
            this.avg_bat = avg_bat;
            setAvg_batIsSet(true);
            this.avg_vcc = avg_vcc;
            setAvg_vccIsSet(true);
            this.min_vcc = min_vcc;
            setMin_vccIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getResult_args(getResult_args other) {
            __isset_bitfield = other.__isset_bitfield;
            if (other.isSetFile_n()) {
                this.file_n = other.file_n;
            }
            this.avg_bat = other.avg_bat;
            this.avg_vcc = other.avg_vcc;
            this.min_vcc = other.min_vcc;
        }

        public getResult_args deepCopy() {
            return new getResult_args(this);
        }

        @Override
        public void clear() {
            this.file_n = null;
            setAvg_batIsSet(false);
            this.avg_bat = false;
            setAvg_vccIsSet(false);
            this.avg_vcc = false;
            setMin_vccIsSet(false);
            this.min_vcc = false;
        }

        public String getFile_n() {
            return this.file_n;
        }

        public getResult_args setFile_n(String file_n) {
            this.file_n = file_n;
            return this;
        }

        public void unsetFile_n() {
            this.file_n = null;
        }

        /** Returns true if field file_n is set (has been assigned a value) and false otherwise */
        public boolean isSetFile_n() {
            return this.file_n != null;
        }

        public void setFile_nIsSet(boolean value) {
            if (!value) {
                this.file_n = null;
            }
        }

        public boolean isAvg_bat() {
            return this.avg_bat;
        }

        public getResult_args setAvg_bat(boolean avg_bat) {
            this.avg_bat = avg_bat;
            setAvg_batIsSet(true);
            return this;
        }

        public void unsetAvg_bat() {
            __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __AVG_BAT_ISSET_ID);
        }

        /** Returns true if field avg_bat is set (has been assigned a value) and false otherwise */
        public boolean isSetAvg_bat() {
            return EncodingUtils.testBit(__isset_bitfield, __AVG_BAT_ISSET_ID);
        }

        public void setAvg_batIsSet(boolean value) {
            __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __AVG_BAT_ISSET_ID, value);
        }

        public boolean isAvg_vcc() {
            return this.avg_vcc;
        }

        public getResult_args setAvg_vcc(boolean avg_vcc) {
            this.avg_vcc = avg_vcc;
            setAvg_vccIsSet(true);
            return this;
        }

        public void unsetAvg_vcc() {
            __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __AVG_VCC_ISSET_ID);
        }

        /** Returns true if field avg_vcc is set (has been assigned a value) and false otherwise */
        public boolean isSetAvg_vcc() {
            return EncodingUtils.testBit(__isset_bitfield, __AVG_VCC_ISSET_ID);
        }

        public void setAvg_vccIsSet(boolean value) {
            __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __AVG_VCC_ISSET_ID, value);
        }

        public boolean isMin_vcc() {
            return this.min_vcc;
        }

        public getResult_args setMin_vcc(boolean min_vcc) {
            this.min_vcc = min_vcc;
            setMin_vccIsSet(true);
            return this;
        }

        public void unsetMin_vcc() {
            __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MIN_VCC_ISSET_ID);
        }

        /** Returns true if field min_vcc is set (has been assigned a value) and false otherwise */
        public boolean isSetMin_vcc() {
            return EncodingUtils.testBit(__isset_bitfield, __MIN_VCC_ISSET_ID);
        }

        public void setMin_vccIsSet(boolean value) {
            __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MIN_VCC_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case FILE_N:
                    if (value == null) {
                        unsetFile_n();
                    } else {
                        setFile_n((String) value);
                    }
                    break;

                case AVG_BAT:
                    if (value == null) {
                        unsetAvg_bat();
                    } else {
                        setAvg_bat((Boolean) value);
                    }
                    break;

                case AVG_VCC:
                    if (value == null) {
                        unsetAvg_vcc();
                    } else {
                        setAvg_vcc((Boolean) value);
                    }
                    break;

                case MIN_VCC:
                    if (value == null) {
                        unsetMin_vcc();
                    } else {
                        setMin_vcc((Boolean) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case FILE_N:
                    return getFile_n();

                case AVG_BAT:
                    return Boolean.valueOf(isAvg_bat());

                case AVG_VCC:
                    return Boolean.valueOf(isAvg_vcc());

                case MIN_VCC:
                    return Boolean.valueOf(isMin_vcc());

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case FILE_N:
                    return isSetFile_n();
                case AVG_BAT:
                    return isSetAvg_bat();
                case AVG_VCC:
                    return isSetAvg_vcc();
                case MIN_VCC:
                    return isSetMin_vcc();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof getResult_args)
                return this.equals((getResult_args) that);
            return false;
        }

        public boolean equals(getResult_args that) {
            if (that == null)
                return false;

            boolean this_present_file_n = true && this.isSetFile_n();
            boolean that_present_file_n = true && that.isSetFile_n();
            if (this_present_file_n || that_present_file_n) {
                if (!(this_present_file_n && that_present_file_n))
                    return false;
                if (!this.file_n.equals(that.file_n))
                    return false;
            }

            boolean this_present_avg_bat = true;
            boolean that_present_avg_bat = true;
            if (this_present_avg_bat || that_present_avg_bat) {
                if (!(this_present_avg_bat && that_present_avg_bat))
                    return false;
                if (this.avg_bat != that.avg_bat)
                    return false;
            }

            boolean this_present_avg_vcc = true;
            boolean that_present_avg_vcc = true;
            if (this_present_avg_vcc || that_present_avg_vcc) {
                if (!(this_present_avg_vcc && that_present_avg_vcc))
                    return false;
                if (this.avg_vcc != that.avg_vcc)
                    return false;
            }

            boolean this_present_min_vcc = true;
            boolean that_present_min_vcc = true;
            if (this_present_min_vcc || that_present_min_vcc) {
                if (!(this_present_min_vcc && that_present_min_vcc))
                    return false;
                if (this.min_vcc != that.min_vcc)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            boolean present_file_n = true && (isSetFile_n());
            list.add(present_file_n);
            if (present_file_n)
                list.add(file_n);

            boolean present_avg_bat = true;
            list.add(present_avg_bat);
            if (present_avg_bat)
                list.add(avg_bat);

            boolean present_avg_vcc = true;
            list.add(present_avg_vcc);
            if (present_avg_vcc)
                list.add(avg_vcc);

            boolean present_min_vcc = true;
            list.add(present_min_vcc);
            if (present_min_vcc)
                list.add(min_vcc);

            return list.hashCode();
        }

        @Override
        public int compareTo(getResult_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetFile_n()).compareTo(other.isSetFile_n());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetFile_n()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.file_n, other.file_n);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetAvg_bat()).compareTo(other.isSetAvg_bat());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetAvg_bat()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.avg_bat, other.avg_bat);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetAvg_vcc()).compareTo(other.isSetAvg_vcc());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetAvg_vcc()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.avg_vcc, other.avg_vcc);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetMin_vcc()).compareTo(other.isSetMin_vcc());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetMin_vcc()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.min_vcc, other.min_vcc);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("getResult_args(");
            boolean first = true;

            sb.append("file_n:");
            if (this.file_n == null) {
                sb.append("null");
            } else {
                sb.append(this.file_n);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("avg_bat:");
            sb.append(this.avg_bat);
            first = false;
            if (!first) sb.append(", ");
            sb.append("avg_vcc:");
            sb.append(this.avg_vcc);
            first = false;
            if (!first) sb.append(", ");
            sb.append("min_vcc:");
            sb.append(this.min_vcc);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getResult_argsStandardSchemeFactory implements SchemeFactory {
            public getResult_argsStandardScheme getScheme() {
                return new getResult_argsStandardScheme();
            }
        }

        private static class getResult_argsStandardScheme extends StandardScheme<getResult_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getResult_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // FILE_N
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.file_n = iprot.readString();
                                struct.setFile_nIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // AVG_BAT
                            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                                struct.avg_bat = iprot.readBool();
                                struct.setAvg_batIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 3: // AVG_VCC
                            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                                struct.avg_vcc = iprot.readBool();
                                struct.setAvg_vccIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 4: // MIN_VCC
                            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                                struct.min_vcc = iprot.readBool();
                                struct.setMin_vccIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getResult_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.file_n != null) {
                    oprot.writeFieldBegin(FILE_N_FIELD_DESC);
                    oprot.writeString(struct.file_n);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldBegin(AVG_BAT_FIELD_DESC);
                oprot.writeBool(struct.avg_bat);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(AVG_VCC_FIELD_DESC);
                oprot.writeBool(struct.avg_vcc);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(MIN_VCC_FIELD_DESC);
                oprot.writeBool(struct.min_vcc);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getResult_argsTupleSchemeFactory implements SchemeFactory {
            public getResult_argsTupleScheme getScheme() {
                return new getResult_argsTupleScheme();
            }
        }

        private static class getResult_argsTupleScheme extends TupleScheme<getResult_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getResult_args struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetFile_n()) {
                    optionals.set(0);
                }
                if (struct.isSetAvg_bat()) {
                    optionals.set(1);
                }
                if (struct.isSetAvg_vcc()) {
                    optionals.set(2);
                }
                if (struct.isSetMin_vcc()) {
                    optionals.set(3);
                }
                oprot.writeBitSet(optionals, 4);
                if (struct.isSetFile_n()) {
                    oprot.writeString(struct.file_n);
                }
                if (struct.isSetAvg_bat()) {
                    oprot.writeBool(struct.avg_bat);
                }
                if (struct.isSetAvg_vcc()) {
                    oprot.writeBool(struct.avg_vcc);
                }
                if (struct.isSetMin_vcc()) {
                    oprot.writeBool(struct.min_vcc);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getResult_args struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(4);
                if (incoming.get(0)) {
                    struct.file_n = iprot.readString();
                    struct.setFile_nIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.avg_bat = iprot.readBool();
                    struct.setAvg_batIsSet(true);
                }
                if (incoming.get(2)) {
                    struct.avg_vcc = iprot.readBool();
                    struct.setAvg_vccIsSet(true);
                }
                if (incoming.get(3)) {
                    struct.min_vcc = iprot.readBool();
                    struct.setMin_vccIsSet(true);
                }
            }
        }

    }

    public static class getResult_result implements org.apache.thrift.TBase<getResult_result, getResult_result._Fields>, java.io.Serializable, Cloneable, Comparable<getResult_result> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getResult_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short) 0);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new getResult_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new getResult_resultTupleSchemeFactory());
        }

        public Map<String, String> success; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short) 0, "success");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP,
                            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING),
                            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getResult_result.class, metaDataMap);
        }

        public getResult_result() {
        }

        public getResult_result(
                Map<String, String> success) {
            this();
            this.success = success;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getResult_result(getResult_result other) {
            if (other.isSetSuccess()) {
                Map<String, String> __this__success = new HashMap<String, String>(other.success);
                this.success = __this__success;
            }
        }

        public getResult_result deepCopy() {
            return new getResult_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        public int getSuccessSize() {
            return (this.success == null) ? 0 : this.success.size();
        }

        public void putToSuccess(String key, String val) {
            if (this.success == null) {
                this.success = new HashMap<String, String>();
            }
            this.success.put(key, val);
        }

        public Map<String, String> getSuccess() {
            return this.success;
        }

        public getResult_result setSuccess(Map<String, String> success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((Map<String, String>) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof getResult_result)
                return this.equals((getResult_result) that);
            return false;
        }

        public boolean equals(getResult_result that) {
            if (that == null)
                return false;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            boolean present_success = true && (isSetSuccess());
            list.add(present_success);
            if (present_success)
                list.add(success);

            return list.hashCode();
        }

        @Override
        public int compareTo(getResult_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("getResult_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getResult_resultStandardSchemeFactory implements SchemeFactory {
            public getResult_resultStandardScheme getScheme() {
                return new getResult_resultStandardScheme();
            }
        }

        private static class getResult_resultStandardScheme extends StandardScheme<getResult_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getResult_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                                {
                                    org.apache.thrift.protocol.TMap _map0 = iprot.readMapBegin();
                                    struct.success = new HashMap<String, String>(2 * _map0.size);
                                    String _key1;
                                    String _val2;
                                    for (int _i3 = 0; _i3 < _map0.size; ++_i3) {
                                        _key1 = iprot.readString();
                                        _val2 = iprot.readString();
                                        struct.success.put(_key1, _val2);
                                    }
                                    iprot.readMapEnd();
                                }
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getResult_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    {
                        oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.success.size()));
                        for (Map.Entry<String, String> _iter4 : struct.success.entrySet()) {
                            oprot.writeString(_iter4.getKey());
                            oprot.writeString(_iter4.getValue());
                        }
                        oprot.writeMapEnd();
                    }
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getResult_resultTupleSchemeFactory implements SchemeFactory {
            public getResult_resultTupleScheme getScheme() {
                return new getResult_resultTupleScheme();
            }
        }

        private static class getResult_resultTupleScheme extends TupleScheme<getResult_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getResult_result struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    {
                        oprot.writeI32(struct.success.size());
                        for (Map.Entry<String, String> _iter5 : struct.success.entrySet()) {
                            oprot.writeString(_iter5.getKey());
                            oprot.writeString(_iter5.getValue());
                        }
                    }
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getResult_result struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    {
                        org.apache.thrift.protocol.TMap _map6 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
                        struct.success = new HashMap<String, String>(2 * _map6.size);
                        String _key7;
                        String _val8;
                        for (int _i9 = 0; _i9 < _map6.size; ++_i9) {
                            _key7 = iprot.readString();
                            _val8 = iprot.readString();
                            struct.success.put(_key7, _val8);
                        }
                    }
                    struct.setSuccessIsSet(true);
                }
            }
        }

    }

    public static class runCmd_args implements org.apache.thrift.TBase<runCmd_args, runCmd_args._Fields>, java.io.Serializable, Cloneable, Comparable<runCmd_args> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("runCmd_args");

        private static final org.apache.thrift.protocol.TField CMD_FIELD_DESC = new org.apache.thrift.protocol.TField("cmd", org.apache.thrift.protocol.TType.STRING, (short) 1);
        private static final org.apache.thrift.protocol.TField FILE_N_FIELD_DESC = new org.apache.thrift.protocol.TField("file_n", org.apache.thrift.protocol.TType.STRING, (short) 2);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new runCmd_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new runCmd_argsTupleSchemeFactory());
        }

        public String cmd; // required
        public String file_n; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            CMD((short) 1, "cmd"),
            FILE_N((short) 2, "file_n");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // CMD
                        return CMD;
                    case 2: // FILE_N
                        return FILE_N;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.CMD, new org.apache.thrift.meta_data.FieldMetaData("cmd", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.FILE_N, new org.apache.thrift.meta_data.FieldMetaData("file_n", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(runCmd_args.class, metaDataMap);
        }

        public runCmd_args() {
        }

        public runCmd_args(
                String cmd,
                String file_n) {
            this();
            this.cmd = cmd;
            this.file_n = file_n;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public runCmd_args(runCmd_args other) {
            if (other.isSetCmd()) {
                this.cmd = other.cmd;
            }
            if (other.isSetFile_n()) {
                this.file_n = other.file_n;
            }
        }

        public runCmd_args deepCopy() {
            return new runCmd_args(this);
        }

        @Override
        public void clear() {
            this.cmd = null;
            this.file_n = null;
        }

        public String getCmd() {
            return this.cmd;
        }

        public runCmd_args setCmd(String cmd) {
            this.cmd = cmd;
            return this;
        }

        public void unsetCmd() {
            this.cmd = null;
        }

        /** Returns true if field cmd is set (has been assigned a value) and false otherwise */
        public boolean isSetCmd() {
            return this.cmd != null;
        }

        public void setCmdIsSet(boolean value) {
            if (!value) {
                this.cmd = null;
            }
        }

        public String getFile_n() {
            return this.file_n;
        }

        public runCmd_args setFile_n(String file_n) {
            this.file_n = file_n;
            return this;
        }

        public void unsetFile_n() {
            this.file_n = null;
        }

        /** Returns true if field file_n is set (has been assigned a value) and false otherwise */
        public boolean isSetFile_n() {
            return this.file_n != null;
        }

        public void setFile_nIsSet(boolean value) {
            if (!value) {
                this.file_n = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case CMD:
                    if (value == null) {
                        unsetCmd();
                    } else {
                        setCmd((String) value);
                    }
                    break;

                case FILE_N:
                    if (value == null) {
                        unsetFile_n();
                    } else {
                        setFile_n((String) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case CMD:
                    return getCmd();

                case FILE_N:
                    return getFile_n();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case CMD:
                    return isSetCmd();
                case FILE_N:
                    return isSetFile_n();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof runCmd_args)
                return this.equals((runCmd_args) that);
            return false;
        }

        public boolean equals(runCmd_args that) {
            if (that == null)
                return false;

            boolean this_present_cmd = true && this.isSetCmd();
            boolean that_present_cmd = true && that.isSetCmd();
            if (this_present_cmd || that_present_cmd) {
                if (!(this_present_cmd && that_present_cmd))
                    return false;
                if (!this.cmd.equals(that.cmd))
                    return false;
            }

            boolean this_present_file_n = true && this.isSetFile_n();
            boolean that_present_file_n = true && that.isSetFile_n();
            if (this_present_file_n || that_present_file_n) {
                if (!(this_present_file_n && that_present_file_n))
                    return false;
                if (!this.file_n.equals(that.file_n))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            boolean present_cmd = true && (isSetCmd());
            list.add(present_cmd);
            if (present_cmd)
                list.add(cmd);

            boolean present_file_n = true && (isSetFile_n());
            list.add(present_file_n);
            if (present_file_n)
                list.add(file_n);

            return list.hashCode();
        }

        @Override
        public int compareTo(runCmd_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetCmd()).compareTo(other.isSetCmd());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetCmd()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cmd, other.cmd);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetFile_n()).compareTo(other.isSetFile_n());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetFile_n()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.file_n, other.file_n);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("runCmd_args(");
            boolean first = true;

            sb.append("cmd:");
            if (this.cmd == null) {
                sb.append("null");
            } else {
                sb.append(this.cmd);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("file_n:");
            if (this.file_n == null) {
                sb.append("null");
            } else {
                sb.append(this.file_n);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class runCmd_argsStandardSchemeFactory implements SchemeFactory {
            public runCmd_argsStandardScheme getScheme() {
                return new runCmd_argsStandardScheme();
            }
        }

        private static class runCmd_argsStandardScheme extends StandardScheme<runCmd_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, runCmd_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // CMD
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.cmd = iprot.readString();
                                struct.setCmdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // FILE_N
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.file_n = iprot.readString();
                                struct.setFile_nIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, runCmd_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.cmd != null) {
                    oprot.writeFieldBegin(CMD_FIELD_DESC);
                    oprot.writeString(struct.cmd);
                    oprot.writeFieldEnd();
                }
                if (struct.file_n != null) {
                    oprot.writeFieldBegin(FILE_N_FIELD_DESC);
                    oprot.writeString(struct.file_n);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class runCmd_argsTupleSchemeFactory implements SchemeFactory {
            public runCmd_argsTupleScheme getScheme() {
                return new runCmd_argsTupleScheme();
            }
        }

        private static class runCmd_argsTupleScheme extends TupleScheme<runCmd_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, runCmd_args struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetCmd()) {
                    optionals.set(0);
                }
                if (struct.isSetFile_n()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetCmd()) {
                    oprot.writeString(struct.cmd);
                }
                if (struct.isSetFile_n()) {
                    oprot.writeString(struct.file_n);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, runCmd_args struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.cmd = iprot.readString();
                    struct.setCmdIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.file_n = iprot.readString();
                    struct.setFile_nIsSet(true);
                }
            }
        }

    }

    public static class runCmd_result implements org.apache.thrift.TBase<runCmd_result, runCmd_result._Fields>, java.io.Serializable, Cloneable, Comparable<runCmd_result> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("runCmd_result");


        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new runCmd_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new runCmd_resultTupleSchemeFactory());
        }


        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(runCmd_result.class, metaDataMap);
        }

        public runCmd_result() {
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public runCmd_result(runCmd_result other) {
        }

        public runCmd_result deepCopy() {
            return new runCmd_result(this);
        }

        @Override
        public void clear() {
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof runCmd_result)
                return this.equals((runCmd_result) that);
            return false;
        }

        public boolean equals(runCmd_result that) {
            if (that == null)
                return false;

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            return list.hashCode();
        }

        @Override
        public int compareTo(runCmd_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("runCmd_result(");
            boolean first = true;

            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class runCmd_resultStandardSchemeFactory implements SchemeFactory {
            public runCmd_resultStandardScheme getScheme() {
                return new runCmd_resultStandardScheme();
            }
        }

        private static class runCmd_resultStandardScheme extends StandardScheme<runCmd_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, runCmd_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, runCmd_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class runCmd_resultTupleSchemeFactory implements SchemeFactory {
            public runCmd_resultTupleScheme getScheme() {
                return new runCmd_resultTupleScheme();
            }
        }

        private static class runCmd_resultTupleScheme extends TupleScheme<runCmd_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, runCmd_result struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, runCmd_result struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
            }
        }

    }

}
